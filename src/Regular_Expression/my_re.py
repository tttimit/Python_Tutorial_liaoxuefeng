# regular expression
import re

test = '用正则表达式'
if re.match(r'正则表达式', test):
    print('ok')
else:
    print('failed')

## 用正则表达式切分字符串比用固定的字符更灵活

## >>>re.split(r'\s+', 'a b   c')
## ['a', 'b', 'c']

## >>> re.split(r'[\s\,]+', 'a,b, c  d')
## ['a', 'b', 'c', 'd']

## >>> re.split(r'[\s\,\;]+', 'a,b;; c  d')
## ['a', 'b', 'c', 'd']    

## 用()表示的就是要提取的分组（Group）

## m = re.match(r'^(\d{3})-(\d{3,8})$', '010-12345')
##
## >>> m.group(0)
## '010-12345'
## >>> m.group(1)
## '010'
## >>> m.group(2)
## '12345'

## 注意到group(0)永远是原始字符串，group(1)、group(2)……表示第1、2、……个子串



## 正则匹配默认是贪婪匹配，也就是匹配尽可能多的字符
## >>> re.match(r'^(\d+)(0*)$', '102300').groups()
## ('102300', '')

## 加个?就可以让\d+采用非贪婪匹配
## >>> re.match(r'^(\d+?)(0*)$', '102300').groups()
## ('1023', '00')


## 当我们在Python中使用正则表达式时，re模块内部会干两件事情：
##
##    1.编译正则表达式，如果正则表达式的字符串本身不合法，会报错；
##
##    2.用编译后的正则表达式去匹配字符串。
##
## 如果一个正则表达式要重复使用几千次，出于效率的考虑，我们可以预编译该正则
## 表达式，接下来重复使用时就不需要编译这个步骤了，直接匹配：

re_telephone = re.compile(r'^(\d{3})-(\d{3,8))$')

re_telephone.match('010-12345').groups()

re_telephone.match('010-8086').groups()
